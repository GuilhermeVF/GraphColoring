# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K-afonDT8F7413NyxGVCxIDXL_6Oxs8q
"""





import networkx as nx
import matplotlib.pyplot as plt 
import numpy as np
import time

#Data Acess
f1 = open("Graphs/Graph1.txt","r")
f2 = open("Graphs/Graph2.txt","r")
f3 = open("Graphs/Graph3.txt","r")
f4 = open("Graphs/Graph4.txt","r")
f5 = open("Graphs/Graph5.txt","r")


line1 = f1.readline()
line2 = f2.readline()
line3 = f3.readline()
line4 = f4.readline()
line5 = f5.readline()

values = line1.rsplit(" ")
num_v1 = int(values[0])
num_a1 = int(values[1])

values = line2.rsplit(" ")
num_v2 = int(values[0])
num_a2 = int(values[1])

values = line3.rsplit(" ")
num_v3 = int(values[0])
num_a3 = int(values[1])

values = line4.rsplit(" ")
num_v4 = int(values[0])
num_a4 = int(values[1])

values = line5.rsplit(" ")
num_v5 = int(values[0])
num_a5 = int(values[1])

colors = []
colors_used = []

graph1 = []
color_relation1 = np.zeros((num_v1), dtype = np.int64)

graph2 = []
color_relation2 = np.zeros((num_v2), dtype = np.int64)

graph3 = []
color_relation3 = np.zeros((num_v3), dtype = np.int64)

graph4 = []
color_relation4 = np.zeros((num_v4), dtype = np.int64)

graph5 = []
color_relation5 = np.zeros((num_v5), dtype = np.int64)



for i in range(100):
  colors.append(i+1)


for i in range(num_v1):
  graph1.append([])

for i in range(num_v2):
  graph2.append([])

for i in range(num_v3):
  graph3.append([])

for i in range(num_v4):
  graph4.append([])

for i in range(num_v5):
  graph5.append([])


while num_a1 != 0:
  line1 = f1.readline()
  x,y = line1.rsplit()
  graph1[int(x)-1].append(int(y)-1)
  graph1[int(y)-1].append(int(x)-1)
  num_a1 = num_a1 - 1

while num_a2 != 0:
  line2 = f2.readline()
  x,y = line2.rsplit()
  graph2[int(x)-1].append(int(y)-1)
  graph2[int(y)-1].append(int(x)-1)
  num_a2 = num_a2 - 1

while num_a3 != 0:
  line3 = f3.readline()
  x,y = line3.rsplit()
  graph3[int(x)-1].append(int(y)-1)
  graph3[int(y)-1].append(int(x)-1)
  num_a3 = num_a3 - 1

while num_a4 != 0:
  line4 = f4.readline()
  x,y = line4.rsplit()
  graph4[int(x)-1].append(int(y)-1)
  graph4[int(y)-1].append(int(x)-1)
  num_a4 = num_a4 - 1

while num_a5 != 0:
  line5 = f5.readline()
  x,y = line5.rsplit()
  graph5[int(x)-1].append(int(y)-1)
  #graph5[int(y)-1].append(int(x)-1)
  num_a5 = num_a5 - 1

#Algoritmo guloso
begin = time.time()

for i in range(len(graph1)):
  for j in range(len(graph1[i])):
    colors_used.append(color_relation1[graph1[i][j]])
  
  colors_avaliable = list(set(colors) - set(colors_used))
  color_relation1[i] = colors_avaliable[0]
  colors_used.clear() 

end = time.time()

time_taken1 = end - begin
print(time_taken1)
print(max(color_relation1))

begin = time.time()

for i in range(len(graph2)):
  for j in range(len(graph2[i])):
    colors_used.append(color_relation2[graph2[i][j]])
  
  colors_avaliable = list(set(colors) - set(colors_used))
  color_relation2[i] = colors_avaliable[0]
  colors_used.clear() 

end = time.time()

time_taken2 = end - begin
print(time_taken2)
print(max(color_relation2))

begin = time.time()

for i in range(len(graph3)):
  for j in range(len(graph3[i])):
    colors_used.append(color_relation3[graph3[i][j]])
  
  colors_avaliable = list(set(colors) - set(colors_used))
  color_relation3[i] = colors_avaliable[0]
  colors_used.clear() 

end = time.time()

time_taken3 = end - begin
print(time_taken3)
print(max(color_relation3))

begin = time.time()

for i in range(len(graph4)):
  for j in range(len(graph4[i])):
    colors_used.append(color_relation4[graph4[i][j]])
  
  colors_avaliable = list(set(colors) - set(colors_used))
  color_relation4[i] = colors_avaliable[0]
  colors_used.clear() 

end = time.time()

time_taken4 = end - begin
print(time_taken4)
print(max(color_relation4))

begin = time.time()

for i in range(len(graph5)):
  for j in range(len(graph5[i])):
    colors_used.append(color_relation5[graph5[i][j]])
  
  colors_avaliable = list(set(colors) - set(colors_used))
  color_relation5[i] = colors_avaliable[0]
  colors_used.clear() 

end = time.time()

time_taken5 = end - begin
print(time_taken5)
print(max(color_relation5))

print('Numero de cores encontradas para o Grafo x: ', max(color_relation1))
print('Melhor solução da literatura: 4')
print('Tempo de execução: ', time_taken1)
print('')

print('Numero de cores encontradas para o Grafo x: ', max(color_relation2))
print('Melhor solução da literatura: 5')
print('Tempo de execução: ', time_taken2)
print('')

print('Numero de cores encontradas para o Grafo x: ', max(color_relation3))
print('Melhor solução da literatura: 7')
print('Tempo de execução: ', time_taken3)
print('')

print('Numero de cores encontradas para o Grafo x: ', max(color_relation4))
print('Melhor solução da literatura: 15')
print('Tempo de execução: ', time_taken4)
print('')

print('Numero de cores encontradas para o Grafo x: ', max(color_relation5))
print('Melhor solução da literatura: 13')
print('Tempo de execução: ', time_taken5)

aux = []

aux.append(time_taken1)
aux.append(time_taken2)
aux.append(time_taken3)
aux.append(time_taken4)
aux.append(time_taken5)

plt.plot(aux)
plt.show()
